import asyncio, os, logging, time, hashlib
from telethon import TelegramClient, events
from dotenv import load_dotenv
import sys

# üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–æ–≥–∞—Ö
sys.stdout.reconfigure(encoding='utf-8')

logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    encoding='utf-8'
)

load_dotenv()
api_id = os.getenv("api_id")
api_hash = os.getenv("api_hash")
phone = os.getenv("phone")

# –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
raw_keywords = []
keywords = [kw.lower() for kw in raw_keywords]

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
raw_exclude_keywords = []
exclude_keywords = [kw.lower() for kw in raw_exclude_keywords]

# –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
channels = []

target_group = int()  # –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏

client = TelegramClient('monitor_session', api_id, api_hash)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ö–µ—à -> timestamp)
recent_messages = {}
DUPLICATE_TIMEOUT = 15 * 60  # 15 –º–∏–Ω—É—Ç

def hash_text(text: str) -> str:
    """–°–æ–∑–¥–∞–µ–º —Ö–µ—à —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    return hashlib.md5(text.encode("utf-8")).hexdigest()

@client.on(events.NewMessage(chats=channels))
async def message_handler(event):
    message = event.message
    if not message.message and not message.media:
        return

    text = message.message.lower() if message.message else ''
    matched_keyword = next((kw for kw in keywords if kw in text), None)
    if not matched_keyword:
        return

    matched_exclude = next((kw for kw in exclude_keywords if kw in text), None)
    if matched_exclude:
        logging.info(f"[LOG] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {matched_exclude}")
        print(f"[LOG] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {matched_exclude}")
        return

    now = time.time()
    msg_hash = hash_text(text)
    if msg_hash in recent_messages and now - recent_messages[msg_hash] < DUPLICATE_TIMEOUT:
        logging.info(f"[LOG] ‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç. –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø–æ–≤—Ç–æ—Ä –∑–∞ {int(now - recent_messages[msg_hash])} —Å–µ–∫).")
        print(f"[LOG] ‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç. –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø–æ–≤—Ç–æ—Ä –∑–∞ {int(now - recent_messages[msg_hash])} —Å–µ–∫).")
        return
    recent_messages[msg_hash] = now

    try:
        sender = await event.get_chat()
        channel_name = getattr(sender, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')

        channel_id = event.chat_id
        user_id = message.sender_id

        # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        user_link = f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id})"
        channel_link = f"[–ö–∞–Ω–∞–ª](https://t.me/c/{str(channel_id)[4:]})" if str(channel_id).startswith("-100") else f"–ö–∞–Ω–∞–ª ID: {channel_id}"
        reply_text = f"{channel_link}\n{user_link}"

        if message.grouped_id:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–ª—å–±–æ–º –∫–∞–∫ –µ—Å—Ç—å
            album = []
            async for m in client.iter_messages(event.chat_id, reverse=True, limit=40):
                if m.grouped_id == message.grouped_id:
                    album.append(m)
            if album:
                album = sorted(album, key=lambda m: m.id)
                await client.forward_messages(target_group, album)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∞–ª—å–±–æ–º–∞
                await client.send_message(target_group, reply_text, reply_to=album[0].id, parse_mode='md')
                logging.info(f'‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω –∞–ª—å–±–æ–º –∏–∑ "{channel_name}" —É—Å–ø–µ—à–Ω–æ.')
                print(f'‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω –∞–ª—å–±–æ–º –∏–∑ "{channel_name}" —É—Å–ø–µ—à–Ω–æ.')
        else:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            forwarded = await client.forward_messages(target_group, message)
            await client.send_message(target_group, reply_text, reply_to=forwarded.id, parse_mode='md')
            logging.info(f'‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ "{channel_name}" —É—Å–ø–µ—à–Ω–æ.')
            print(f'‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ "{channel_name}" —É—Å–ø–µ—à–Ω–æ.')

    except Exception as e:
        logging.error(f'‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}')
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}')


async def main():
    await client.start(phone=phone)
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã...")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã...")
    logging.info(f'üîç –°–ª—É—à–∞–µ–º –∫–∞–Ω–∞–ª—ã: {", ".join(str(c) for c in channels)}')
    print(f'üîç –°–ª—É—à–∞–µ–º –∫–∞–Ω–∞–ª—ã: {", ".join(str(c) for c in channels)}')
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())